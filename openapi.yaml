openapi: 3.0.3
info:
  title: Swagger Mesto - OpenAPI 3.0
  contact:
    email: eve982@yandex.ru
  version: 1.0.0
servers:
  - url: https://eve982.pet-project.nomoredomains.work
    description: Удаленный сервер (использует реальные данные)
  - url: https://localhost:{port}
    description: Локальный сервер на порту 3000 (использует данные локальной БД)
    variables:
      port:
        enum:
          - '3000'
          - '3001'
          - '3002'
        default: '3000'
        description: Выберите Ваш порт
  - url: https://eve982.pet-project.nomoredomains.work/
    variables: {}
paths:
  /signup:
    post:
      summary: Регистрация нового пользователя
      tags:
        - user
      operationId: signup
      requestBody:
        required: true
        content:
          name: null
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Пользователь с таким email уже зарегистрирован
  /signin:
    post:
      summary: Авторизация пользователя
      tags:
        - user
      operationId: authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Пользователь успешно авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Неверный логин, пароль или JWT-токен.
        '404':
          description: Пользователь с таким логином не найден.
  /users:
    post:
      tags:
        - user
      summary: Создать нового пользователя
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Новый пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Указанный при создании пользователя email уже есть на сервере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/me:
    post:
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      required:
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Жак-Ив Кусто
        about:
          type: string
          example: Исследователь
        avatar:
          type: string
          format: http
          example: >-
            https://avatars.dzeninfra.ru/get-zen_doc/4585608/pub_605c57a7109e966efd97d510_605c7663bf54ce495c4b770b/scale_1200
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Card:
      type: object
      required:
        - name
        - link
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Озеро Байкал
          description: Название фотографии
        link:
          type: string
          format: http
          example: >-
            https://vsegda-pomnim.com/uploads/posts/2022-03/1647463586_6-vsegda-pomnim-com-p-ozero-baikal-foto-6.jpg
          description: Ссылка на фотографию
        owner:
          $ref: '#/components/schemas/User'
        likes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date
          example: '2017-01-01'
    Cards:
      type: array
      items:
        $ref: '#/components/schemas/Card'
